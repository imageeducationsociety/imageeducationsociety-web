/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Hero = {
  _id: string;
  _type: "hero";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subtitle?: string;
};

export type Brand = {
  _id: string;
  _type: "brand";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  logo?: {
    logo_mobile?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    logo_desktop?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
  keywords?: Array<string>;
};

export type Icon = {
  _type: "icon";
  name?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Hero | Brand | Icon | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: BRAND_QUERY
// Query: *[_type == "brand"][0] {        _id,        _createdAt,        title,        description,        "logo": logo{            "logo_mobile": logo_mobile{            asset->{                _id,                url,                metadata{                    lqip,                },            },                hotspot,                crop,            },            "logo_desktop": logo_desktop{                asset->{                    _id,                    url,                    metadata{                    lqip,                    }                },                hotspot,                crop,            },        },        keywords,    }
export type BRAND_QUERYResult = {
  _id: string;
  _createdAt: string;
  title: string | null;
  description: string | null;
  logo: {
    logo_mobile: {
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          lqip: string | null;
        } | null;
      } | null;
      hotspot: SanityImageHotspot | null;
      crop: SanityImageCrop | null;
    } | null;
    logo_desktop: {
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          lqip: string | null;
        } | null;
      } | null;
      hotspot: SanityImageHotspot | null;
      crop: SanityImageCrop | null;
    } | null;
  } | null;
  keywords: Array<string> | null;
} | null;
// Variable: HERO_QUERY
// Query: *[_type == "hero"][0] {        _id,        _createdAt,        title,        subtitle,    }
export type HERO_QUERYResult = {
  _id: string;
  _createdAt: string;
  title: string | null;
  subtitle: string | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"brand\"][0] {\n        _id,\n        _createdAt,\n        title,\n        description,\n        \"logo\": logo{\n            \"logo_mobile\": logo_mobile{\n            asset->{\n                _id,\n                url,\n                metadata{\n                    lqip,\n                },\n            },\n                hotspot,\n                crop,\n            },\n            \"logo_desktop\": logo_desktop{\n                asset->{\n                    _id,\n                    url,\n                    metadata{\n                    lqip,\n                    }\n                },\n                hotspot,\n                crop,\n            },\n        },\n        keywords,\n    }": BRAND_QUERYResult;
    "*[_type == \"hero\"][0] {\n        _id,\n        _createdAt,\n        title,\n        subtitle,\n    }": HERO_QUERYResult;
  }
}
